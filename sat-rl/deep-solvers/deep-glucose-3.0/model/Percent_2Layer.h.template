#ifndef Glucose_Model_h
#define Glucose_Model_h

#include <vector>

#include "model/ModelHelper.h"

namespace Glucose {{

#define FEAT_SIZE    {state_vbn_scale_shape_0}
#define LAYER_1_SIZE {policy_layers_linear_2_weight_shape_0}
#define OUTPUT_SIZE  {policy_layers_linear_2_weight_shape_1}

//=================================================================================================
// Model -- the model class:
// Made from model file: {model_file_name}

class Model {{
    static const double state_vbn_scale               [];
    static const double state_vbn_shift               [];
    static const double state_vbn_effective_mean      [];
    static const double state_vbn_effective_std       [];
    static const double policy_layers_linear_0_weight [FEAT_SIZE][LAYER_1_SIZE];
    static const double policy_layers_linear_0_bias   [];
    static const double policy_layers_linear_2_weight [LAYER_1_SIZE][OUTPUT_SIZE];
    static const double policy_layers_linear_2_bias   [];

public:
    // n1 = input - self.effective_mean
    // normed_input = n1 / (self.effective_std + float(np.finfo(np.float32).eps))
    // layer_0_input = normed_input*self.scale + self.shift
    // layer_0_output = layer_0_input * policy_layers_linear_0_weight + policy_layers_linear_0_bias
    // layer_2_input = relu(layer_0_output)
    // layer_2_output = layer_2_input * policy_layers_linear_2_weigth + policy_layers_linear_2_bias
    // output = relu(layer_2_output)
    static inline std::vector<double> forward(const double input[]) {{
        double n1, normed_input;
        double layer_1_input[FEAT_SIZE];
        double layer_2_input[LAYER_1_SIZE];
        double output[OUTPUT_SIZE];

        // double eps = std::numeric_limits<double>::min();
        double eps = 1.1920928955078125e-07;

        for (int i=0; i < FEAT_SIZE; i++) {{
            n1 = input[i] - state_vbn_effective_mean[i];
            normed_input = n1 / (state_vbn_effective_std[i] + eps);
            layer_1_input[i] = normed_input * state_vbn_scale[i] + state_vbn_shift[i];
        }}

        LAYER(layer_1_input, FEAT_SIZE,    policy_layers_linear_0_weight, LAYER_1_SIZE, policy_layers_linear_0_bias, ModelHelper::relu, layer_2_input);
        LAYER(layer_2_input, LAYER_1_SIZE, policy_layers_linear_2_weight, OUTPUT_SIZE,  policy_layers_linear_2_bias, ModelHelper::no_op, output);

        std::vector<double> ret(2);
        ret[0] = ModelHelper::sigmoid(output[0]); // percentage
        ret[1] = ModelHelper::relu(output[1]); // lbd threshold
        return ret;
    }}
}};

}}
#endif